package com.example.demo.kulry.util;

import java.io.IOException;
import java.util.function.Consumer;

import org.apache.http.HttpHost;
import org.apache.lucene.search.TotalHits;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import org.json.JSONObject;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.system.OutputCaptureExtension;
import org.springframework.context.annotation.Bean;
import org.springframework.ui.Model;

@ExtendWith(OutputCaptureExtension.class)
public class UsageCostLoggerApplicationTests {
   

    private String ES_INDEX = "statistical_korea_online_price_test";
    // 외부 IP
    // private String ES_HOST = "1.225.38.51";
    private String ES_HOST = "192.168.1.78";
    private int ES_PORT = 9287;
    private String ES_SCHEME = "http";
   
    private IndexRequest indexRequest;
    
    @Test
   public void contextLoads() throws IOException {
       
       HttpHost host = new HttpHost(ES_HOST, ES_PORT, ES_SCHEME);
      
       RestHighLevelClient restHighLevelClient = new RestHighLevelClient(
                RestClient.builder(
                        new HttpHost(ES_HOST, ES_PORT, ES_SCHEME)));
        
      SearchRequest searchRequest = new SearchRequest(ES_INDEX); 
      
      SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder(); 

      searchSourceBuilder.query(QueryBuilders.matchQuery("title", "친환경"));
      
      /* 크기
       * searchSourceBuilder.from((pageNum-1)*10); searchSourceBuilder.size(10);
       * searchRequest.source(searchSourceBuilder);
       */
      
      
      SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);
      
      System.out.println(searchResponse);
      SearchHits hits = searchResponse.getHits();
      
      TotalHits totalHits = hits.getTotalHits();

      // search total count
      long numHits = totalHits.value;
      System.out.println("numHits="+numHits);
      
      SearchHit[] searchHits = hits.getHits();
      System.out.println("searchHits="+searchHits.toString());
    }
}